---

- name: add yarn apt key
  apt_key:
    url: https://dl.yarnpkg.com/debian/pubkey.gpg
    state: present

- name: add yarn repository
  apt_repository:
    repo: deb https://dl.yarnpkg.com/debian/ stable main
    state: present

- name: install dependencies
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - postgresql
    - python-psycopg2 # needed for ansible postgresql module
    - git
    - virtualenv
    - build-essential # for pip to build some libraries
    - python3
    - python3-dev
    - redis-server
    - gettext
    - python-pip # so we can pip install influxdb later
    - yarn # for building the mjml templates

- name: Start Redis and enable at boot
  systemd:
    name: redis-server
    enabled: true
    state: started
    daemon_reload: yes

#------------------------------------------------------------------
# nginx config

- name: nginx config
  template:
    src: nginx.j2
    dest: /etc/nginx/sites-available/{{ site }}
  notify:
    - reload nginx

- name: nginx sites-enabled symlink
  file:
    src: /etc/nginx/sites-available/{{ site }}
    dest: /etc/nginx/sites-enabled/{{ site }}
    state: link
  notify:
    - reload nginx

- name: create frontend directory
  file:
    path: "{{ static_root }}"
    state: directory
  when: we_are_in_vagrant

- name: dummy frontend file
  copy:
    content: hello
    dest: "{{ static_root }}/index.html"
  when: we_are_in_vagrant

#------------------------------------------------------------------
# ensure influxdb database is created

- block:

  - name: install influxdb python lib
    pip:
      name: influxdb
      state: present

  - name: create influxdb database
    influxdb_database:
      database_name: "{{ influxdb_database }}"
      hostname: 127.0.0.1
      username: ""
      password: ""

  when: influxdb_database is defined

#------------------------------------------------------------------
# initialize basics
# does not actually deploy site, but should be ready to after this

- name: git repo
  git:
    repo: https://github.com/yunity/foodsaving-backend.git
    dest: /var/www/{{ site }}/www
    update: true
    version: "{{ branch }}"

- name: virtualenv
  command: >
    virtualenv
      --no-setuptools
      --python=python3
      --no-site-packages
      /var/www/{{ site }}/www/env
  args:
    creates: /var/www/{{ site }}/www/env

- name: install tools
  pip:
    name: "{{ item }}"
    virtualenv: "/var/www/{{ site }}/www/env"
  with_items:
    - setuptools
    - pip-tools

- name: pip sync
  command: env/bin/pip-sync
  args:
    chdir: "/var/www/{{ site }}/www"
  changed_when: False

- name: allow user to restart workers
  copy:
    dest: "/etc/sudoers.d/deploy_{{ site }}"
    content: "%{{ site }} ALL=(ALL) NOPASSWD: /bin/systemctl restart {{ site }}-worker.target\n"

- name: make uploads directory
  file:
    dest: /var/www/{{ site }}/www/{{ uploads_directory }}
    state: directory
    owner: "{{ site }}"
    group: "{{ site }}"


#------------------------------------------------------------------
# django settings

- name: django local settings
  template:
    src: local_settings.py.j2
    dest: /var/www/{{ site }}/www/config/local_settings.py
  notify:
    - restart app

#------------------------------------------------------------------
# cron jobs

- name: update pickup dates cronjob
  cron:
    name: "{{ site }} | update pickup dates"
    minute: "0"
    job: "cd /var/www/{{ site }}/www/ && env/bin/python manage.py update_pickup_dates"
    user: "{{ site }}"

- name: process finished pickup dates cronjob
  cron:
    name: "{{ site }} | process finished pickup dates"
    job: "cd /var/www/{{ site }}/www/ && env/bin/python manage.py process_finished_pickup_dates"
    user: "{{ site }}"

- name: send notifications cronjob
  cron:
    name: "{{ site }} | send notifications"
    job: "cd /var/www/{{ site }}/www/ && env/bin/python manage.py send_notifications"
    user: "{{ site }}"

#------------------------------------------------------------------
# systemd servics

- name: systemd daphne service
  template:
    src: systemd.daphne.service.j2
    dest: /etc/systemd/system/{{ site }}-daphne.service
  notify:
    - restart daphne

- name: systemd worker target
  template:
    src: systemd.worker.target.j2
    dest: /etc/systemd/system/{{ site }}-worker.target
  notify:
    - restart workers

- name: systemd worker service
  template:
    src: systemd.worker.service.j2
    dest: /etc/systemd/system/{{ site }}-worker@.service
  notify:
    - restart workers

- name: systemd huey service
  template:
    src: systemd.huey.service.j2
    dest: /etc/systemd/system/{{ site }}-huey.service
  notify:
    - restart huey

- name: systemd enable daphne
  systemd:
    name: "{{ site }}-daphne.service"
    state: started
    enabled: yes

- name: systemd enable workers
  systemd:
    name: "{{ site }}-worker.target"
    state: started
    enabled: yes

- name: systemd enable huey
  systemd:
    name: "{{ site }}-huey.service"
    state: started
    enabled: yes


#------------------------------------------------------------------
# deploy setup

- name: setup deploy user
  user:
    name: "{{ site }}-deploy"
    state: present
    groups:
      - "{{ site }}"
    home: "/var/www/{{ site }}-deploy"

- name: set deploy public key
  authorized_key:
    user: "{{ site }}-deploy"
    state: present
    key: "{{ deploy_public_key }}"
